<?php
// $Id$

/**
 * @file
 *   Adds a toolbar to the bottom of the page for site users, like Facebook.
 *   The bar keeps track of alerts from the site and can hold blocks as well.
 */

//============================
//DRUPAL HOOK IMPLEMENTATIONS.
//============================

/**
 * Implementation of hook_help().
 */
function appbar_help($path, $arg) {
  if ($path == 'admin/help#appbar') {
    return '<p>'. t('The Appbar module adds a toolbar to the bottom of the page for site users, like the Application bar on Facebook.') .'</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function appbar_menu() {
  $items['admin/settings/appbar'] = array(
    'title' => 'Appbar',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('appbar_admin'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Allows administrators to adjust certain display settings for Appbar.',
    'file' => 'appbar.admin.inc',
  );
  $items['admin/settings/appbar/general'] = array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'weight' => -1,
  );
  $items['appbar/refresh/list'] = array(
    'title' => 'Refresh Appbar',
    'page callback' => '_appbar_page',
    'page arguments' => array('list'),
    'access arguments' => array('use appbar'),
    'description' => 'Gets the HTML for the alert dialog for use in JQuery.',
    'type' => MENU_CALLBACK,
  );
  $items['appbar/refresh/count'] = array(
    'title' => 'Refresh Appbar',
    'page callback' => '_appbar_page',
    'page arguments' => array('count'),
    'access arguments' => array('use appbar'),
    'description' => 'Gets the number of new alerts.',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function appbar_perm() {
  return array('use appbar', "hide actions from others' appbar");
}

/**
 * Implementation of hook_user().
 */
function appbar_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'delete') {
    db_query("DELETE FROM {appbar} WHERE uid = %d", $account->uid);
  }
  elseif ($op == 'form' && $category == 'account' && variable_get('appbar_user_vis', 0) != 0) {
    $data = unserialize($account->data);
    if (!isset($data['appbar_user_vis'])) {
      $data['appbar_user_vis'] = 1;
    }
    $form['appbar_user_vis'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show Application Toolbar'),
      '#default_value' => $data['appbar_user_vis'],
    );
    return $form;
  }
}

/**
 * Implementation of hook_init().
 */
function appbar_init() {
  //We don't do a full _appbar_show() because _appbar_prepare() checks
  //_appbar_show(TRUE).
  if (_appbar_vis()) {
    _appbar_prepare();
    //Record system messages as Appbar alerts if applicable.
    if (_appbar_show(TRUE)) {
      _appbar_get_system_messages();
    }
  }
}

/**
 * Implementation of hook_footer().
 */
function appbar_footer($main = 0) {
  //The _appbar_show() check is in the theme function.
  return theme('appbar_bar');
}

/**
 * Implementation of hook_system_info_alter().
 */
function appbar_system_info_alter(&$info, $file) {
  if (isset($info['regions'])) {
    $info['regions'] += array('appbar' => t('Appbar'));
  }
}

/**
 * Implementation of hook_cron().
 */
function appbar_cron() {
  $interval = variable_get('appbar_cron_cleanup', 0);
  if ($interval) {
    $delete_after = time() - $interval;
    $cron_limit = variable_get('appbar_cron_limit', 1000);
    //Remove old appbar alerts (only if unread).
    db_query("DELETE FROM {appbar} WHERE is_new = 0 AND created <= %d LIMIT %d", $delete_after, $cron_limit);
    $deleted_alerts = db_affected_rows();
    //Log number of deleted appbar rows.
    if ($deleted_alerts > 0) {
      watchdog('cron', 'Deleted @total old appbar alerts.', array('@total' => $deleted_alerts));
    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function appbar_form_block_admin_configure_alter(&$form, $form_state) {
  $module = arg(4);
  $delta = arg(5);
  $region = db_result(db_query("SELECT region FROM {blocks} WHERE module = '%s' AND delta = '%s'", $module, $delta));
  $form['appbar'] = array(
    '#type' => 'fieldset',
    '#title' => t('Appbar Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => $region == 'appbar' ? FALSE : TRUE,
    '#weight' => 1,
    '#tree' => TRUE,
  );
  $form['appbar']['info'] = array(
    '#value' => '<p>'. t('These settings only apply if this block appears in the Application Toolbar.') .'</p>',
  );
  $form['appbar']['type'] = array(
    '#type' => 'radios',
    '#title' => t('Display type'),
    '#default_value' => variable_get('appbar_block_display_type_'. $module .'_'. $delta, 'popup'),
    '#required' => TRUE,
    '#options' => array(
      'popup' => t('Popup (block content appears above bar when title is clicked)'),
      'inline' => t('Inline (block content appears directly on the toolbar)'),
      'hover' => t('Hover (block content appears above bar when mouse hovers over it)'),
    ),
  );
  $form['appbar']['key'] = array(
    '#type' => 'value',
    '#value' => $module .'_'. $delta,
  );
  $form['#submit'][] = 'appbar_block_settings_submit';
  $form['submit']['#weight'] = 2;
}

/**
 * The submit callback to save the block settings.
 */
function appbar_block_settings_submit($form, $form_state) {
  $key = $form_state['values']['appbar']['key'];
  variable_set('appbar_block_display_type_'. $key, $form_state['values']['appbar']['type']);
}

/**
 * Implementation of hook_appbar_css().
 */
function appbar_appbar_css() {
  $blue_path = drupal_get_path('module', 'appbar') .'/blue.appbar.css';
  $dark_path = drupal_get_path('module', 'appbar') .'/dark.appbar.css';
  $wunderbar_path = drupal_get_path('module', 'appbar') .'/wunderbar.appbar.css';
  return array(
    $blue_path => t('Blue (@path)', array('@path' => $blue_path)),
    $dark_path => t('Dark (@path)', array('@path' => $dark_path)),
    $wunderbar_path => t('Wunderbar (@path)', array('@path' => $wunderbar_path)),
  );
}

/**
 * Implementation of hook_theme().
 */
function appbar_theme($existing, $type, $theme, $path) {
  return array(
    'appbar_alerts' => array(
      'arguments' => array(),
    ),
    'appbar_alerts_list' => array(
      'arguments' => array(),
    ),
    'appbar_bar' => array(
      'arguments' => array(
        'check_vis' => TRUE,
      ),
    ),
    'appbar_time' => array(
      'arguments' => array(
        'time' => time(),
      ),
    ),
  );
}

//================
//THEME FUNCTIONS.
//================

/**
 * Themes the Appbar.
 *
 * @param $check_vis
 *   If TRUE, the Appbar will only show up if it's on a page specified by the
 *   administrator. Otherwise, it will show up on the current page (as long as
 *   the current user has permission to see it).
 */
function theme_appbar_bar($check_vis = TRUE) {
  //If the visibility check fails, the CSS and JS won't have been added to the
  //page and system status messages won't have been recorded (in hook_init()) so
  //we need to make sure these things happen.
  if (!$check_vis && !_appbar_vis()) {
    _appbar_prepare();
    if (_appbar_show(TRUE)) {
      _appbar_get_system_messages();
    }
  }
  if (!_appbar_show() && ($check_vis || !_appbar_show(TRUE))) {
    return;
  }
  //Update the 'blocks' DB table with the blocks currently exported by modules.
  _block_rehash();
  //Get a list of blocks in the appbar region (from the Context module if necessary).
  $block_list = array();
  if (module_exists('context') && function_exists('context_get_plugin')) {
    $block_list = context_get_plugin('reaction', 'block')->block_list('appbar');
  }
  else {
    $block_list = block_list('appbar');
  }
  $blocks = '';
  foreach ($block_list as $block) {
    if (!isset($block->content) || !$block->content) {
      continue;
    }
    $key = $block->module .'_'. $block->delta;
    $display_type = variable_get('appbar_block_display_type_'. $key, 'popup');
    if ($display_type == 'inline') {
      //Title is ignored.
      //$block->content should be safe at this stage... at least, core assumes it is, so we will too.
      //Don't use normal block markup to avoid awkward styles from the theme.
      $blocks .= '<div class="appbar-block appbar-block-inline" id="appbar-block-'. $key .'">'. $block->content .'</div>';
    }
    elseif ($display_type == 'popup') {
      $blocks .= '<div class="appbar-block appbar-block-popup" id="appbar-block-'. $key .'">';
      //$block->content should be safe at this stage... at least, core assumes it is, so we will too.
      $blocks .= '<div class="appbar-block-content">'.
        '<div class="appbar-block-controls">';
      if (user_access('administer blocks')) {
        $blocks .= '<span class="appbar-block-configure">'.
          l(t('configure'), 'admin/build/block/configure/'. $block->module .'/'. $block->delta) .
        '</span>';
      }
      $blocks .= '<span class="appbar-minimize">-</span>'.
        '</div>'.
        '<div>'. $block->content .'</div>'.
      '</div>';
      $blocks .= '<span class="appbar-block-title">';
      if (!empty($block->subject)) {
        //$block->subject is sanitized already.
        $blocks .= $block->subject;
      }
      else {
        //There is nothing we could say here that is useful to users, so
        //let's go with something helpful to admin instead.
        $blocks .= t('<no title>');
      }
      $blocks .= '</span>';
      $blocks .= '</div>';
    }
    elseif ($display_type == 'hover') {
      //$block->content should be safe at this stage... at least, core assumes it is, so we will too.
      $blocks .= '<div class="appbar-block appbar-block-hover" id="appbar-block-'. $key .'">
        <div class="appbar-block-content">'. $block->content .'</div>
        <span class="appbar-block-title">'.
          //$block->subject is sanitized already.
          (empty($block->subject) ? t('<no title>') : $block->subject) .
        '</span>
      </div>';
    }
  }
  $existing = array(
    'appbar-blocks' => $blocks,
    'appbar_messages' => theme('appbar_alerts'),
  );
  $regions = '';
  foreach ($existing as $name => $region) {
    if (!empty($region)) {
      $regions .= '<div id="'. $name .'" class="appbar-region">'. $region .'</div>';
    }
  }
  return '<div id="appbar_container"><div id="appbar_sub"><div id="appbar">'. $regions .'</div></div></div>';
}

/**
 * Themes the alerts for display in the appbar.
 */
function theme_appbar_alerts() {
  //We can't allow anonymous users to see alerts because we could not mark them
  //as read using our current system. One day maybe we'll switch to using
  //$_SESSION to store the last-read date for anonymous users.
  if ($GLOBALS['user']->uid === 0 || !variable_get('appbar_use_alerts', 1)) {
    return;
  }
  //The JQuery overwrites the correct count of new messages into the following span.
  $count = '<span id="appbar_count">'. appbar_get_messages(TRUE) .'</span>';
  $output = '<span id="appbar_alerts">'. t('Alerts (!count new)', array('!count' => $count)) .'</span>';
  //The JQuery will insert the contents of theme('appbar_alerts_list') into the following div.
  $output .= '<div id="appbar_alerts_list"></div>';
  return $output;
}

/**
 * Themes the list of Appbar alerts.
 */
function theme_appbar_alerts_list() {
  if (module_exists('views') && variable_get('appbar_view', 'appbar-default') != 'appbar-default') {
    return views_embed_view(variable_get('appbar_view', 'appbar-default'), 'default', $GLOBALS['user']->uid .',0');
  }
  $output = '';
  $alerts = appbar_get_messages();
  $count = count($alerts);
  foreach ($alerts as $key => $alert) {
    //Add the appbar-id- prefix to the class so that we don't accidentally end up with commonly themed classes like "status."
    $item = '<div class="appbar_alert';
    if ($alert->is_new == 1) {
      $item .= ' appbar-new';
    }
    if ($key == 0) {
      $item .= ' appbar-alert-first';
    }
    if ((int) $key === $count - 1) {
      $item .= ' appbar-alert-last';
    }
    $item .= '">';
    $item .= $alert->message;
    $item .= '<span class="appbar_time">'. theme('appbar_time', $alert->alert_time) .'</span>';
    $item .= '</div>';
    $output .= $item;
  }
  return $output;
}

/**
 * Returns a formatted string showing the time the alert was submitted.
 *
 * @param $time
 *   The Unix timestamp for when the relevant alert was updated.
 * @return
 *   If the alert was submitted within the last 3 days, returns a "time ago"
 *   date. If not, returns a normal (small) date. If zero, returns FALSE.
 */
function theme_appbar_time($time) {
  if (!$time) {
    return FALSE;
  }
  if (time() - $time < 60) {
    return t('a moment ago');
  }
  elseif (time() - $time < 60 * 60 * 24 * 3) {
    return t('!time ago', array('!time' => format_interval(time() - $time, 1)));
  }
  else {
    return format_date($time, 'small');
  }
}

//==============
//API FUNCTIONS.
//==============

/**
 * Retrieves available alerts.
 *
 * @param $get_new_count
 *   If TRUE, returns only the count of new alerts. Otherwise, returns an array
 *   of message objects.
 */
function appbar_get_messages($get_new_count = FALSE) {
  //Get new alerts.
  global $user;
  $alerts = array();
  $result = db_query("SELECT * FROM {appbar} WHERE uid = %d AND is_new = 1 ORDER BY aid DESC", $user->uid);
  while ($row = db_fetch_object($result)) {
    $alerts[] = $row;
  }
  $count = count($alerts);
  if ($get_new_count) {
    return $count;
  }
  //We need to get at least the minimum number of alerts, so check the old ones too if necessary.
  if ($count < variable_get('appbar_min', 5)) {
    $remaining = variable_get('appbar_min', 5) - $count;
    $result = db_query_range("SELECT * FROM {appbar} WHERE uid = %d AND is_new = 0 ORDER BY aid DESC", $user->uid, 0, $remaining);
  }
  while ($row = db_fetch_object($result)) {
    $alerts[] = $row;
  }

  if ($count > 0) {
    db_query("UPDATE {appbar} SET is_new = 0 WHERE is_new = 1 AND uid = %d", $user->uid);
  }
  return $alerts;
}

/**
 * Saves an alert for the appbar to pick up later.
 *
 * @param $message
 *   The message text.
 * @param $uid
 *   The User ID of the user to whom the message should be shown. If NULL (the
 *   default) the current user will be used. 'all' sets the alert for each
 *   user. Can also take an array of User IDs.
 * @param $reset
 *   Whether to reset the cache that reduces redundant messages.
 */
function appbar_set_message($message, $uid = NULL, $reset = FALSE) {
  static $cache;
  global $user;
  if (is_array($uid)) {
    if ($reset) {
      $cache = array();
    }
    foreach ($uid as $u) {
      //Prevent nested arrays or including 'all' in the list.
      if (is_numeric($u)) {
        appbar_set_message($message, $u);
      }
    }
    return;
  }
  if ($uid === NULL) {
    $uid = $user->uid;
  }
  //If the person who did the action ($user) is in a hidden role, don't record.
  if ($uid != $user->uid && _appbar_hide_alerts($user) && $uid != 'all') {
    return;
  }
  //Don't record actions for the anonymous user.
  if ($uid === 0) {
    return;
  }
  if ($reset || !isset($cache)) {
    $cache = array();
  }
  if (!isset($cache[$uid])) {
    $cache[$uid] = array();
  }
  if (in_array($message, $cache[$uid])) {
    return;
  }
  $cache[$uid][] = $message;
  if ($uid == 'all') {
    $uids = array();
    $result = db_query("SELECT uid FROM {users} WHERE uid <> 0");
    while ($account = db_fetch_object($result)) {
      $uids[] = $account->uid;
    }
    //I have *no* idea how many messages can be safely processed at once.
    //250 is a *completely* arbitrary guess.
    $chunks = array_chunk($uids, 250);
    $operations = array();
    foreach ($chunks as $chunk) {
      $operations[] = array('_appbar_set_message', array($message, $chunk));
    }
    batch_set(array(
      'title' => t('Processing Appbar alert to everyone'),
      'operations' => $operations,
      'finished' => '_appbar_process_finished',
      'file' => drupal_get_path('module', 'appbar') .'/appbar.module',
    ));
    return;
  }
  $object = array('created' => time(), 'message' => $message, 'is_new' => 1, 'uid' => $uid);
  drupal_alter('appbar_message', $object);
  drupal_write_record('appbar', $object);
}

//=================
//HELPER FUNCTIONS.
//=================

/**
 * Creates alerts for messages to everyone via the Batch API.
 */
function _appbar_set_message($message, $uid, &$context) {
  appbar_set_message($message, $uid);
  if (is_numeric($uid) || is_null($uid)) {
    $context['results']['num']++;
  }
  elseif (is_array($uid)) {
    $context['results']['num'] += count($uid);
  }
}

/**
 * Alerts the user that processing the message to everyone is complete.
 */
function _appbar_process_finished($success, $results, $operations) {
  $message = t('Finished processing Appbar alert to everyone with an error.');
  if ($success) {
    if (!$results['num']) {
      $results['num'] = 0;
    }
    $message = t('Finished processing Appbar alert to everyone (@num users).', array('@num' => $results['num']));
  }
  drupal_set_message($message);
}

/**
 * Re-formats messages from the format returned by drupal_get_messages() to the
 * format set by appbar_set_message().
 */
function _appbar_reformat_messages($messages_orig) {
  if (empty($messages_orig['status'])) {
    return array();
  }
  $messages = $messages_orig['status'];
  $new = array();
  foreach ($messages as $message) {
    $new[] = (object) array('created' => time(), 'message' => $message, 'is_new' => 1, 'aid' => 0, 'uid' => $GLOBALS['user']->uid);
  }
  return $new;
}

/**
 * Checks user access, user authentication, and visibility settings to determine
 * whether to show the Appbar.
 *
 * @param $skip_vis
 *   If TRUE, skips the visibility check.
 * @return
 *   TRUE if the Appbar should be shown; FALSE otherwise.
 */
function _appbar_show($skip_vis = FALSE) {
  if (!user_access('use appbar')) {
    return FALSE;
  }
  global $user;
  $rids = array_keys($user->roles);
  //Use the user's visibility setting, if necessary.
  $data = unserialize($user->data);
  if (variable_get('appbar_user_vis', 0) != 0) {
    if (!$data['appbar_user_vis']) {
      return FALSE;
    }
  }
  if (!$skip_vis) {
    return _appbar_vis();
  }
  return TRUE;
}

/**
 * Checks to see if the Appbar should show up on the current page.
 * @return
 *   TRUE if the Appbar should show up; FALSE otherwise.
 */
function _appbar_vis() {
  if (variable_get('appbar_page_vis', 0) < 2) {
    $path = drupal_get_path_alias($_GET['q']);
    //Compare with the internal and path alias (if any).
    $page_match = drupal_match_path($path, variable_get('appbar_vis_list', ''));
    if ($path != $_GET['q'] && !$page_match) {
      $page_match = drupal_match_path($_GET['q'], variable_get('appbar_vis_list', ''));
    }
    if (variable_get('appbar_page_vis', 0) == 1 && $page_match) {
      return TRUE;
    }
    elseif (variable_get('appbar_page_vis', 0) == 0 && !$page_match) {
      return TRUE;
    }
    return FALSE;
  }
  else {
    return drupal_eval(variable_get('appbar_vis_list', ''));
  }
}

/**
 * Checks whether a user is in a role whose activity should not be recorded.
 *
 * @param $account
 *   The user account object of the user to check for visibility.
 * @return
 *   TRUE if the user's activity should NOT be recorded; FALSE otherwise.
 */
function _appbar_hide_alerts($account) {
  if ($account->uid == 1 && variable_get('appbar_uid1', 1)) {
    return FALSE;
  }
  return user_access("hide actions from others' appbar", $account);
}

/**
 * Adds the CSS and JS to the page.
 */
function _appbar_prepare() {
  if (_appbar_show(TRUE)) {
    global $base_url;
    drupal_add_js(array('appbar' => array(
      'delay' => variable_get('appbar_time', 20000),
      'base_path' => variable_get('clean_url', 0) ? base_path() : base_path() .'index.php?q=',
      'open_path' => $base_url .'/'. drupal_get_path('module', 'appbar') .'/open.png',
      'close_path' => $base_url .'/'. drupal_get_path('module', 'appbar') .'/close.png',
      'use_alerts' => variable_get('appbar_use_alerts', 1),
    )), 'setting');
    _appbar_add_css();
    drupal_add_js(drupal_get_path('module', 'appbar') .'/appbar.js');
  }
}

/**
 * Determines which style to use.
 *
 * @param $list
 *   If TRUE, returns an associative array of filepaths to CSS files.
 *   If FALSE, adds the appropriate CSS to the page.
 */
function _appbar_add_css($list = FALSE) {
  drupal_add_css(drupal_get_path('module', 'appbar') .'/appbar.css');
  if (!$list && variable_get('appbar_css', 'default') != 'default' && file_exists(variable_get('appbar_css', 'default'))) {
    drupal_add_css(variable_get('appbar_css', 'default'));
  }
  if ($list) {
    $css = array('default' => t('Default'));
    $filedir = _appbar_add_style_by_dir(file_directory_path() .'/appbar');
    $appbardir = _appbar_add_style_by_dir('sites/all/appbar');
    $imported = module_invoke_all('appbar_css');
    return array_merge($css, $filedir, $appbardir, $imported);
  }
}

/**
 * Finds Appbar styles by directory.
 *
 * @param $filedir
 *   The directory in which to search for styles.
 */
function _appbar_add_style_by_dir($filedir) {
  if (file_exists($filedir)) {
    $files = scandir($filedir);
    foreach ($files as $file) {
      if (drupal_substr($file, -4) == '.css') {
        $name = drupal_ucfirst(drupal_substr($file, 0, -11));
        return array("$filedir/$file" => "$name ($file)");
      }
    }
  }
  return array();
}

/**
 * Retrieves system messages if applicable.
 */
function _appbar_get_system_messages() {
  $opt = variable_get('appbar_hijack', 'no');
  $messages = array();
  if ($opt == 'yes-clear') {
    $messages = _appbar_reformat_messages(drupal_get_messages('status', TRUE));
  }
  if ($opt == 'yes-no') {
    $messages = _appbar_reformat_messages(drupal_get_messages('status', FALSE));
  }
  if (!empty($messages)) {
    foreach ($messages as $message) {
      drupal_write_record('appbar', $message);
    }
  }
}

/**
 * Shows the right stuff on the relevant callback page.
 *
 * @param $page
 *   Which page we're looking at.
 */
function _appbar_page($page = 'count') {
  switch ($page) {
    case 'count':
      echo appbar_get_messages(TRUE);
      break;
    case 'list':
      echo theme('appbar_alerts_list');
      break;
    default:
      echo 'error';
  }
}

//=============
//INTEGRATIONS.
//=============

/**
 * Implementation of hook_rules_action_info().
 */
function appbar_rules_action_info() {
  return array(
    'appbar_action_set_message' => array(
      'label' => t('Set an alert in the Application Toolbar'),
      'module' => 'Application Toolbar',
      'eval input' => array('message', 'account'),
    ),
  );
}

/**
 * Sets an alert from Rules.
 */
function appbar_action_set_message($settings) {
  if ($settings['account'] == 'user') {
    $settings['account'] = $GLOBALS['user']->uid;
  }
  appbar_set_message($settings['message'], $settings['account']);
}

/**
 * Configuration form for the Rules action to set an alert.
 */
function appbar_action_set_message_form($settings, &$form) {
  $settings += array('message' => '', 'account' => 'user');
  $form['settings']['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#required' => TRUE,
    '#rows' => 5,
    '#default_value' => $settings['message'],
  );
  $form['settings']['account'] = array(
    '#type' => 'textfield',
    '#title' => t('Show message to (User ID)'),
    '#description' => t('The alert will be registered for the person specified above.') .' '.
      t('You can use tokens in this field.') .' '.
      t('You can also type "all" (without the quotes) for the message to go to all users,') .' '.
      t('or "user" (without the quotes) for the message to go to the current user.'),
    '#required' => TRUE,
    '#default_value' => $settings['account'],
  );
}

/**
 * Implementation of hook_action_info().
 */
function appbar_action_info() {
  return array(
    'appbar_set_message_action' => array(
      'description' => t('Set an alert in the Application Toolbar.'),
      'type' => 'appbar',
      'configurable' => TRUE,
      'hooks' => array('any' => TRUE),
    ),
  );
}

/**
 * Sets a message via Triggers/Actions.
 */
function appbar_set_message_action(&$object, $context = array()) {
  global $user;
  if ($context['hook'] == 'nodeapi') {
    $context['hook'] = 'node';
  }
  if ($context['uid'] == 'user') {
    $context['uid'] = $user->uid;
  }
  appbar_set_message(str_replace(array(theme('username', $user), $context['hook'], $context['op']), array('!user', '!object', '!op'), $context['message']), $context['uid']);
}

/**
 * Configuration form for the Set Appbar Message action.
 */
function appbar_set_message_action_form($context) {
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#required' => TRUE,
    '#rows' => 5,
  );
  $form['destination'] = array(
    '#type' => 'select',
    '#title' => t('Show message to'),
    '#description' => t('The alert will be registered for the person or people specified above.') .' '.
      t('If you need more flexibility, try using the <a href="@rules">Rules module</a>.',
        array('@rules' => 'http://drupal.org/project/rules')
      ),
    '#required' => TRUE,
    '#default_value' => 'user',
    '#options' => array('all' => t('All users'), 'user' => t('The user who performed the action'), 1 => t('User 1')),
  );
  return $form;
}

/**
 * Submit function for the configuration form for the Set Appbar Message action.
 */
function appbar_set_message_action_submit($form, &$form_state) {
  return array(
    'message' => filter_xss($form_state['values']['message']),
    'uid' => $form_state['values']['destination'],
  );
}

/**
 * Implementation of hook_views_api().
 */
function appbar_views_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_activity_messages_alter().
 */
function appbar_activity_messages_alter($messages, $object_name, $types) {
  foreach ($messages as $language_id => $language_messages) {
    foreach ($language_messages as $uid => $message) {
      $id = 'activity';
      if ($uid == 0) {
        $uid = 'all';
        $id = 'activity-all';
      }
      appbar_set_message($message, $id, $uid);
    }
  }
}

/**
 * Implementation of hook_messaging().
 */
function appbar_messaging($op = 'info') {
  switch ($op) {
    case 'send methods':
      $info['appbar'] = array(
        'title' => t('Appbar'),
        'name' => t('Appbar'),
        'group' => 'web',
        'address_type' => 'user',
        'type' => MESSAGING_TYPE_SEND,
        'description' => t('Set alerts in the Appbar.'),
        'send callback' => 'appbar_messaging_send',
        'anonymous' => FALSE,
        //Formatting options that may not be needed.
        'glue' => '<br />',
        'filter' => 'messaging_filter',
        'format' => 'HTML',
      );
      return $info;
  }
}

/**
 * Directs a message to Appbar from the Messaging module.
 */
function appbar_messaging_send($uid, $message) {
  appbar_set_message($message->get_body(), $uid);
  return TRUE;
}
